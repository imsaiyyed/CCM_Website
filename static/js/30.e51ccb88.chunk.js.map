{"version":3,"sources":["app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"names":["getItems","count","Array","from","length","v","k","map","id","concat","content","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","Object","slicedToArray","getItemStyle","isDragging","draggableStyle","objectSpread2","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","width","SimpleListDnD","Component","constructor","props","super","this","onDragEnd","destination","items","state","source","index","setState","render","react_default","a","createElement","react_beautiful_dnd_esm","droppableId","provided","snapshot","assign","droppableProps","ref","innerRef","style","item","key","draggableId","draggableProps","dragHandleProps","placeholder","display","overflow","SimpleHorizontalList","bind","direction","offset","move","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","TwoListDnD","[object Object]","args","selected","id2List","droppable","droppable2","getList","className","AppDragAndDrop","matx","routeSegments","name","path","title","Drag_Drop_SimpleListDnD","Drag_Drop_SimpleHorizontalList","Drag_Drop_TwoListDnD"],"mappings":"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","file":"static/js/30.e51ccb88.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nclass SimpleListDnD extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(10)\n    };\n  }\n\n  onDragEnd = result => {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  };\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\">\n          {(provided, snapshot) => (\n            <div\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleListDnD;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = count =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k}`,\n    content: `item ${k}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 ${grid}px 0 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  display: \"flex\",\n  padding: grid,\n  overflow: \"auto\"\n});\n\nclass SimpleHorizontalList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: getItems(6)\n    };\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  onDragEnd(result) {\n    // dropped outside the list\n    if (!result.destination) {\n      return;\n    }\n\n    const items = reorder(\n      this.state.items,\n      result.source.index,\n      result.destination.index\n    );\n\n    this.setState({\n      items\n    });\n  }\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n          {(provided, snapshot) => (\n            <div\n              ref={provided.innerRef}\n              style={getListStyle(snapshot.isDraggingOver)}\n              {...provided.droppableProps}\n            >\n              {this.state.items.map((item, index) => (\n                <Draggable key={item.id} draggableId={item.id} index={index}>\n                  {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      style={getItemStyle(\n                        snapshot.isDragging,\n                        provided.draggableProps.style\n                      )}\n                    >\n                      {item.content}\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default SimpleHorizontalList;\n","import React, { Component } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}`,\n    content: `item ${k + offset}`\n  }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nclass TwoListDnD extends Component {\n  state = {\n    items: getItems(10),\n    selected: getItems(5, 10)\n  };\n\n  /**\n   * A semi-generic way to handle multiple lists. Matches\n   * the IDs of the droppable container to the names of the\n   * source arrays stored in the state.\n   */\n  id2List = {\n    droppable: \"items\",\n    droppable2: \"selected\"\n  };\n\n  getList = id => this.state[this.id2List[id]];\n\n  onDragEnd = result => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        this.getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n\n      let state = { items };\n\n      if (source.droppableId === \"droppable2\") {\n        state = { selected: items };\n      }\n\n      this.setState(state);\n    } else {\n      const result = move(\n        this.getList(source.droppableId),\n        this.getList(destination.droppableId),\n        source,\n        destination\n      );\n\n      this.setState({\n        items: result.droppable,\n        selected: result.droppable2\n      });\n    }\n  };\n\n  // Normally you would want to split things out into separate components.\n  // But in this example everything is just done in one place for simplicity\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"flex flex-space-around\">\n          <Droppable droppableId=\"droppable\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.items.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Droppable droppableId=\"droppable2\">\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                style={getListStyle(snapshot.isDraggingOver)}\n              >\n                {this.state.selected.map((item, index) => (\n                  <Draggable key={item.id} draggableId={item.id} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        style={getItemStyle(\n                          snapshot.isDragging,\n                          provided.draggableProps.style\n                        )}\n                      >\n                        {item.content}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </div>\n      </DragDropContext>\n    );\n  }\n}\n\nexport default TwoListDnD;\n","import React from \"react\";\nimport SimpleListDnD from \"./SimpleListDnD\";\nimport { Breadcrumb, SimpleCard } from \"matx\";\nimport SimpleHorizontalList from \"./SimpleHorizontalList\";\nimport TwoListDnD from \"./TwoListDnD\";\n\nconst AppDragAndDrop = () => {\n  return (\n    <div className=\"m-sm-30\">\n      <div  className=\"mb-sm-30\">\n        <Breadcrumb\n          routeSegments={[\n            { name: \"others\", path: \"/drag-and-drop\" },\n            { name: \"Drag and Drop\" }\n          ]}\n        />\n      </div>\n      <SimpleCard title=\"Simple List Drag and Drop\">\n        <SimpleListDnD />\n      </SimpleCard>\n      <div className=\"py-12\" />\n      <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\n        <SimpleHorizontalList />\n      </SimpleCard>\n      <div className=\"py-12\" />\n      <SimpleCard title=\"Simple Two List Drag and Drop\">\n        <TwoListDnD />\n      </SimpleCard>\n    </div>\n  );\n};\n\nexport default AppDragAndDrop;\n"],"sourceRoot":""}